#include "common_layers.h"
#include "model.h"
#include <cmath>
#include <iostream>
#include "dense.h"

using namespace std;

// ---------------------------------------------
// Dense layer generated by the code generator
// ---------------------------------------------
/*Symbol*/
void dense_hcl(bit input[MAX_FMAP], const bit W_dense[MAX_W_CONV], const float* bias, bit output[MAX_FMAP]) {
  for (int xx_outer = 0; xx_outer < 128; ++xx_outer) {
    for (int xx_inner = 0; xx_inner < 2; ++xx_inner) {
       int reducer2;
      reducer2 = 0;
      for (int ra = 0; ra < 512; ++ra) {
        reducer2 = ((int)(((ap_int<34>)(input[(((xx_outer * 2) + xx_inner) + (0 * 512))] == W_dense[(((xx_outer * 2) + xx_inner) + (ra * 256))])) + ((ap_int<34>)reducer2)));
      }
      output[(((xx_outer * 2) + xx_inner) + (0 * 256))] = ((ap_uint<1>)(((ap_int<34>)0 < (((ap_int<34>)reducer2) + ((ap_int<34>)bias[((xx_outer * 2) + xx_inner)]))) ? 1 : 0));
    }
  }
}



/*Symbol2*/
void dense_hcl2(bit input[MAX_FMAP], const bit W_dense[MAX_W_CONV], const float* bias, bit output[MAX_FMAP]) {
  for (int xx_outer = 0; xx_outer < 2; ++xx_outer) {
    for (int xx_inner = 0; xx_inner < 7; ++xx_inner) {
      if ((xx_outer * 7) < (10 - xx_inner)) {
         int reducer3;
        reducer3 = 0;
        for (int ra = 0; ra < 256; ++ra) {
          reducer3 = ((int)(((ap_int<34>)(input[(((xx_outer * 7) + xx_inner) + (0 * 256))] == W_dense[(((xx_outer * 7) + xx_inner) + (ra * 10))])) + ((ap_int<34>)reducer3)));
        }
        output[(((xx_outer * 7) + xx_inner) + (0 * 10))] = ((ap_uint<1>)(((ap_int<34>)0 < (((ap_int<34>)reducer3) + ((ap_int<34>)bias[((xx_outer * 7) + xx_inner)]))) ? 1 : 0));
      }
    }
  }
}

